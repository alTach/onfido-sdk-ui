/**
 * We want our units to be based on `em`, so that our SDK can accommodate for
 * the user changing their browser font size.
 * At the same time, `px` is a unit often used in templates etc. from Design.
 * To accommodate for both of these cases, we make our $unit be 1/16 of an `em`.
 * This results in each $unit into being the same as 1px (when the parent
 * font-size is 16px, as it is by default).
 *
 * So each "unit" isn't a pixel, but it is when the parent font size is 16px,
 * and it's proportionate to the difference otherwise.
 */
$unit: (1/16) * 1em;
$font-size-base: 16 * $unit;

/*
 * We also need different units for when trying to do `px` "equivalents" when
 * our parent has a different font size.
 */
$unit-large: (1/20) * 1em;
$font-size-large: 20 * $unit;

$unit-small: (1/14) * 1em;
$font-size-small: 14 * $unit;

$unit-x-small: (1/11) * 1em;
$font-size-x-small: 11 * $unit;

/*
 * We also have a special unit for the react-phone-number-input library, so
 * we can keep its units in line with whatever units we decide to pick
 */
$unit-rrui: 1em;

$font-family: 'Open Sans', sans-serif;

$large-text-margin: 40 * $unit;
$small-text-margin: 24 * $unit;
$padding-lg: 16 * $unit;
$padding-sm: 10 * $unit;
$padding-xs: 8 * $unit;

$footer-height: 32 * $unit;
$footer-margin: 16 * $unit;
$navigation-height: 32 * $unit;
$navigation-height-sm-screen: 38 * $unit;
$navigation-padding-top: $padding-lg;
$navigation-padding-sides: $padding-lg;
$navigation-padding-top-sm-screen: $padding-sm;
$navigation-padding-sides-sm-screen: $padding-xs;

%absolute-center {
  margin: auto;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

%overflow-drop-shadow {
  @media (--shorter-viewport) {
    background-color: rgba(var(--color-background));
    bottom: 0;
    box-shadow: 0 -5px 10px -5px #7b7b7b;
    left: -1em;
    position: absolute;
    right: -1em;
    top: -8 * $unit;
    z-index: 0;
    /* By default the sibling button will be hidden by this shadow span */
    + button {
      z-index: 1;
    }
  }
}

@mixin width-parent-relative($base-width, $parent-width) {
  width: 100% * ($base-width/$parent-width);
}
